[user]
	# Name used in commit messages.
	name = Weyert de Boer
	# Email used in commit messages.
	email = weyert@innerfuse.biz
[github]
	# GitHub username for command-line tools.
	user = weyert
[color]
	# Colour terminal command output when possible.
	ui = auto
[color "branch"]
	current = yellow reverse
	local = yellow
	remote = green
[color "diff"]
	meta = yellow bold
	frag = magenta bold # line info
	old = red # deletions
	new = green # additions
[color "status"]
	added = yellow
	changed = green
	untracked = cyan
[gist]
	# Open GitHub Gist in browser after submission.
	browse = true
[push]
	# Push to the set upstream branch being tracked by default.
	default = simple
[pull]
	# Default to rebasing on pulls
	rebase = true
[branch]
  autosetuprebase = always
[fetch]
	# Always prune when fetching (and pulling).
	prune = 1
[rerere]
	# Store and re-use manual conflict resolution changes.
	enabled = 1
[core]
	# Exclude everything this file. Used for general exclusions.
	excludesfile = /Users/weyertdeboer/.gitignore
	# Set attributes on files. Used for general diff improvements.
	attributesfile = ~/.gitattributes
	# Don't prompt for commit messages for merge commits.
	mergeoptions = --no-edit
	commitGraph = true
	pager = diff-so-fancy | less --tabs=4 -RFX
	# Output unicode characters (e.g. emoji).
     	quotepath = on
[help]
  # Autocorrect mistyped commands.
	autocorrect = 1
[alias]
	## 'New' Commands
	# Unstage the changes in a given file.
	unstage = reset HEAD --
	# View the current changes in the staging area.
	staged = diff --cached
	# Print the name of the current branch.
	current-branch = symbolic-ref --short HEAD
	# Print the name of the current upstream tracking branch.
	upstream = !git config --get branch.$(git current-branch).remote \
	         || echo origin
	# Cherry-pick a commit with your signature.
	sign = cherry-pick --signoff
	# List all current SVN externals for this repository.
	svn-externals = !git svn show-externals | grep -x \\"[^#].*\\"
	# Create a git:// server of the current repository.
	# WARNING: this gives all users read/write access
	# without authentication (so only use on trusted networks).
	serve = !git daemon --reuseaddr --export-all --base-path=. \
	                    --verbose ./.git
	# Merge a branch and commit a merge commit (even if one
	# isn't needed)
	noff = merge --no-ff
	# Merge a branch with a merge commit and resolve any conflicts
	# always using that branch's version rather than the current branch.
	theirs = !git noff -Xtheirs
	# Fetch all branches and rebase the current branch against
	# upstream/master.
	rebase-against-master = !git fetch --all \
	                      && git rebase $(git upstream)/master
	# Push the current branch upstream to origin using the same branch
	# name for the remote branch.
	upstream-current-branch = !git push --set-upstream origin \
	                         $(git current-branch)
	# Create a pull request on GitHub using the `hub` command.
	pull-request = !rm -f .git/PULLREQ_EDITMSG && hub pull-request -o
	# Upstream the current branch to origin and create a pull request
	# on GitHub.
	upstream-and-pull-request = !git upstream-current-branch \
	                          && git pull-request
	# Get the current diff but show differences between characters
	# instead of just the differences between lines.
	word-diff = diff --word-diff
	# Push the current branch and set it as the default upstream branch.
	push-and-set-upstream = push --set-upstream
	# Create a new branch by checking out another branch.
	checkout-as-new-branch = checkout -b
	# Rebase against origin/master and prompt for what operations
	# should be performed.
	interactively-rebase-against-origin-master = \
	  !git rebase --interactive origin/master
	# Show the commit log with a prettier, clearer history.
	pretty-one-line-log = log --graph --oneline --decorate
	# Commit any changes to files, squash them into the last commit
	# and update its date.
	fix-up-previous-commit = !git commit --all --amend \
	                              --reuse-message=HEAD --date=\"$(date)\" #"
	# Checkout the master branch and update it.
	pull-master = !git checkout master && git pull
	# Commit a work-in-progress commit (to use with
	# fix-up-previous-commit)
	work-in-progress = commit -a -m 'WIP'
	# Merge a branch with a merge commit and use the more time-consuming
	# patience diff algorithm
	patience = !git noff -Xpatience
	# Hard reset branch to the upstream version.
	hard-reset = !git reset --hard $(git upstream)/$(git current-branch)
	# Assume the specified file is unchanged to stop changes
	# being seen by Git
	assume = update-index --assume-unchanged
	# No longer assume a specified file remains unchanged
	unassume = update-index --no-assume-unchanged
	# List all files that are assumed to be unchanged
	assumed = !git ls-files -v | grep '^[hsmrck?]' | cut -c 3-
	# Delete all non-master branches
	delete-merged = !git branch --merged | grep -v 'master' | grep -v '*' | xargs -n 1 git branch -D
	# Get the merge-base compared to origin/master
	merge-base-master = merge-base origin/master HEAD
	# Diff against the current branch's merge-base
	diff-merge-base = !git diff $(git merge-base-master)

	# Push the current branch upstream to MikeMcQuaid using the same
	# branch name for the remote branch.
	um = !(git remote -v | grep -q MikeMcQuaid || hub fork) \
	    && git push --set-upstream MikeMcQuaid $(git current-branch)
	# Push the current branch to MikeMcQuaid and open a pull request.
	umpr = !git um && hub pull-request -o

	## Shortened 'New' Commands
	fahr = !git fetch --all && git hard-reset
	rem = !git rebase-against-master
	wip = !git work-in-progress
	pr = !git upstream-and-pull-request
	up = !git upstream-current-branch
	fa = !git fetch --all
	pf = !git push --force-with-lease
	dm = !git diff-merge-base
	mb = !git merge-base-master
	w = !git word-diff
	u = !git push-and-set-upstream
	b = !git checkout-as-new-branch
	i = !git interactively-rebase-against-origin-master
	# `true` needed as the return status is wrong otherwise.
	l = !git pretty-one-line-log || true
	# View abbreviated SHA, description, and history graph of the latest 20 commits
	ll = log --pretty=oneline -n 20 --graph --abbrev-commit
	f = !git fix-up-previous-commit

	# View the current working tree status using the short format

# Show verbose output about tags, branches or remotes
	tags = tag -l
	branches = branch -a
	remotes = remote -v

	# Amend the currently staged files to the latest commit
	amend = commit --amend --reuse-message=HEAD

	# Credit an author on the latest commit
	credit = "!f() { git commit --amend --author \"$1 <$2>\" -C HEAD; }; f"

	# Interactive rebase with the given number of latest commits
	reb = "!r() { git rebase -i HEAD~$1; }; r"

	# Find branches containing commit
	fb = "!f() { git branch -a --contains $1; }; f"

	# Find tags containing commit
	ft = "!f() { git describe --always --contains $1; }; f"

	# Find commits by source code
	fc = "!f() { git log --pretty=format:'%C(yellow)%h  %Cblue%ad  %Creset%s%Cgreen  [%cn] %Cred%d' --decorate --date=short -S$1; }; f"

	# Find commits by commit message
	fm = "!f() { git log --pretty=format:'%C(yellow)%h  %Cblue%ad  %Creset%s%Cgreen  [%cn] %Cred%d' --decorate --date=short --grep=$1; }; f"

	# Remove branches that have already been merged with master
	# a.k.a. ‘delete merged’
	dm = "!git branch --merged | grep -v '\\*' | xargs -n 1 git branch -d"

	# List contributors with number of commits
	contributors = shortlog --summary --numbered

	## Shortened Existing Commands
	p = pull
	s = status --short --branch
[instaweb]
	# Use the Ruby WEBRick library when creating a `git instaweb`
	# HTTP server.
	httpd = webrick
[diff]
	# Use the slower but better patience diff algorithm
	algorithm = patience
	# Use new diff algorithm to make e.g. function diffs look better.
	compactionheuristic = true
[diff "xml"]
	textconv = xmllint --format --recover
[mergetool]
	# Don't prompt before opening the merge tool.
	prompt = false
	# Don't keep backups of the merge tool inputs.
	keepBackup = false
	# Don't keep the merge tool temporary input/output files.
	keepTemporaries = false
[apply]
	# Cleanup whitespace by default when apply patches.
	whitespace = fix
[rebase]
	# Run `git stash` if needed before a `git rebase`
	autoStash = true
	# Auto-add `--autosquash` to `git rebase`
	autoSquash = true

# URL shorthands
[url "git@github.com:"]
	insteadOf = "gh:"
	pushInsteadOf = "github:"
	pushInsteadOf = "git://github.com/"

[url "git://github.com/"]
	insteadOf = "github:"

[url "git@gist.github.com:"]
	insteadOf = "gst:"
	pushInsteadOf = "gist:"
	pushInsteadOf = "git://gist.github.com/"

[url "git://gist.github.com/"]
	insteadOf = "gist:"

[credential]
	# Use macOS Keychain to store HTTP passwords.
	helper = osxkeychain
[hub]
	# Use HTTPS rather than SSH protocol in Hub
	protocol = https
# Settings for Git LFS
[filter "lfs"]
	clean = git-lfs clean -- %f
	smudge = git-lfs smudge -- %f
	required = true
	process = git-lfs filter-process
[commit]
	# Show the diff as a comment in the commit message template.
	verbose = true
	# Sign commits with GPG
	gpgsign = false
	template = /Users/weyertdeboer/.stCommitMsg
[tag]
	# Sort tags by newest first
	sort = -version:refname
[protocol]
	# Use Git v2 protocol for better performance
	# TODO: re-enable when more widely supported by Git versions
	# version = 2
[log]
	# Print more readable dates in `git log`
	# TODO: re-enable when more widely supported by Git versions
	# date = human
[difftool "sourcetree"]
	cmd = opendiff \"$LOCAL\" \"$REMOTE\"
	path =
[mergetool "sourcetree"]
	cmd = /Applications/Sourcetree.app/Contents/Resources/opendiff-w.sh \"$LOCAL\" \"$REMOTE\" -ancestor \"$BASE\" -merge \"$MERGED\"
	trustExitCode = true
[gpg]
	program = gpg2
[init]
	defaultBranch = main
